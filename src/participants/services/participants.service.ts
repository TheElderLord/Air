import { Inject, Injectable } from '@nestjs/common';
import { EventEmitter2, OnEvent } from '@nestjs/event-emitter';
import Redis from 'ioredis';
import { REDIS_CLIENT } from 'src/global/redis.module';
import { Participant } from 'src/participants/dto/participantDto';
import { OtpService } from 'src/utils/otp.service';

@Injectable()
export class ParticipantsService {
  private tableKey = 'participants:table';

  constructor(
    @Inject(REDIS_CLIENT) private readonly redisClient: Redis,
    private readonly otpService: OtpService,
    private readonly eventEmitter: EventEmitter2,
  ) {}

  /**
   * –ò–º–∏—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ Redis —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ö–µ—à–∞.
   * –ó–¥–µ—Å—å –º—ã —Å–æ–∑–¥–∞—ë–º –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
   */
  async createTable(): Promise<string> {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
    await this.redisClient.del(this.tableKey);
    // –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
    // –ù–∞–ø—Ä–∏–º–µ—Ä: await this.redis.hset(tableKey, 'header', 'participantData');
    return this.tableKey;
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ "—Ç–∞–±–ª–∏—Ü—É"
   * @param id –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∫–ª—é—á –≤ —Ö–µ—à–µ)
   * @param data –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ JSON)
   */
  async addParticipant(data: Participant): Promise<Participant> {
    const id = await this.redisClient.incr('participants:nextId');
    data.createdAt = new Date();
    const otp = this.otpService.generateOtp();
    await this.redisClient.hset(this.tableKey, id, JSON.stringify(data));
    const subject = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ—á—Ç—É';
    const text = `–í–∞—à –∫–æ–¥ ${otp}`;
    await this.otpService.sendOtpViaEmail(data.email, subject, text);
    await this.otpService.saveOtp(data.email, otp);
    return data;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –µ–≥–æ ID
   * @param id –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞
   */
  async getParticipant(id: string): Promise<Participant | null> {
    const data = await this.redisClient.hget(this.tableKey, id);
    return data ? (JSON.parse(data) as Participant) : null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ "—Ç–∞–±–ª–∏—Ü—ã"
   */
  async getAllParticipants(): Promise<Participant[] | null> {
    const data = await this.redisClient.hgetall(this.tableKey);
    const participants: Participant[] = [];
    for (const key in data) {
      const participant = JSON.parse(data[key]) as Participant;
      // Inject the id from the key into the participant object
      participants.push({ ...participant, id: Number(key) });
    }
    return participants;
  }

  async deleteParticipant(id: string): Promise<boolean> {
    // HDEL returns the number of fields that were removed.
    const result = await this.redisClient.hdel(this.tableKey, id);
    console.log('Deleting participant with id:', id);

    // If result > 0, then the participant was deleted successfully.
    return result > 0;
  }

  async verifyEmail(email: string, otp: string): Promise<boolean> {
    try {
      const verified = await this.otpService.verifyOtp(email, otp);
      if (verified) {
        // üëá Emit event asynchronously
        this.eventEmitter.emit('participant.verified', { email });
      }
      return verified;
    } catch (err) {
      console.error('verifyEmail error:', err);
      return false;
    }
  }

  @OnEvent('participant.verified', { async: true })
  async handleVerifiedEvent(payload: { email: string }) {
    const subject = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞';
    const text = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ñ–¥–µ–º –≤–∞—Å 26 –∞–ø—Ä–µ–ª—è';

    try {
      await this.otpService.sendOtpViaEmail(payload.email, subject, text);
      console.log('Welcome email sent to:', payload.email);
    } catch (error) {
      console.error('Error sending welcome email:', error);
    }
  }
}
